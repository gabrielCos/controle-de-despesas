{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\ProgWeb\\\\Projetos\\\\Controle de despesas\\\\src\\\\componentes\\\\NewExpense\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\n\n//componente usado para formatar e estilizar os inputs e botões que estarão presentes no form para add uma nova despesa\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = props => {\n  _s();\n  /*o tipo padrão do valor de um input é string*/\n\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n\n  //colancando os 3 estados acima em um só dentro de um objeto\n\n  //const [userInput, setUserInput] = useState({\n  //    enteredTitle: '',\n  //    enteredAmount: '',\n  //    enteredDate: '',\n  //})\n\n  /*não importa quantas vezes esse componente seja atualizado, esse estado será armazenado e sobreviverá*/\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n    //é necessário usar o operador destructuring para que os outros dados não se percam ao colocar multiplos estados em um só\n    // setUserInput({\n    //   ...userInput,\n    //    enteredTitle: event.target.value,        \n    //}),\n    //sempre usar ESSA abordagem quando o novo estado depende de um estado anterior\n    // setUserInput((prevState) => {\n    //      return {...prevState, enteredTitle: event.target.value};\n    //   })\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  //ao invés de escrever 3 funções, como feito acima, é possível escrever uma só função como esta \n  //como essa função tem parâmetros ela deve ser passada dentro de uma função anônima recebendo o evento como parâmetro\n  //Para que a função não seja executada quando o código jsx for analisado, mas sim quando o evento, no caso onChange, acontecer\n  //onChange = ((event) => inputChangeHandler('title', event.target.value))\n\n  /* const inputChangeHandler = (identifier, value) => {\r\n      if (identifier === 'title') {\r\n          setEnteredTitle(value); \r\n      } else if (identifier === 'date') {\r\n          setEnteredDate(value);\r\n      } else {\r\n          setEnteredAmount(value);\r\n      }\r\n  }*/\n\n  //função que vai lidar com a submissão do form\n  //na função, ao invés de só ouvirmos ao evento, agora ela também retorna um valor a ele, nesse caso, limpando os inputs\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n\n    //como onSaveExpenseData está esperando uma função, o código está executando a função passada com propriedade nesse local\n    //e recebendo o o objeto expenseData como um parâmetro\n    props.onSaveExpenseData(expenseData);\n    setEnteredTitle('');\n    setEnteredAmount('');\n    setEnteredDate('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          value: enteredAmount,\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          value: enteredDate,\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ExpenseForm","props","_s","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","onSubmit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","step","max","_c","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/ProgWeb/Projetos/Controle de despesas/src/componentes/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, {useState} from \"react\";\r\n\r\nimport \"./ExpenseForm.css\";\r\n\r\n//componente usado para formatar e estilizar os inputs e botões que estarão presentes no form para add uma nova despesa\r\n\r\nconst ExpenseForm = (props) => {\r\n\r\n    /*o tipo padrão do valor de um input é string*/\r\n\r\n    const [enteredTitle, setEnteredTitle] = useState('');\r\n    const [enteredAmount, setEnteredAmount] = useState('');\r\n    const [enteredDate, setEnteredDate] = useState('');\r\n\r\n    //colancando os 3 estados acima em um só dentro de um objeto\r\n\r\n    //const [userInput, setUserInput] = useState({\r\n    //    enteredTitle: '',\r\n    //    enteredAmount: '',\r\n    //    enteredDate: '',\r\n    //})\r\n\r\n    /*não importa quantas vezes esse componente seja atualizado, esse estado será armazenado e sobreviverá*/\r\n    const titleChangeHandler = (event) => {\r\n        setEnteredTitle(event.target.value);\r\n        //é necessário usar o operador destructuring para que os outros dados não se percam ao colocar multiplos estados em um só\r\n       // setUserInput({\r\n         //   ...userInput,\r\n        //    enteredTitle: event.target.value,        \r\n        //}),\r\n        //sempre usar ESSA abordagem quando o novo estado depende de um estado anterior\r\n       // setUserInput((prevState) => {\r\n      //      return {...prevState, enteredTitle: event.target.value};\r\n     //   })\r\n    };\r\n    const amountChangeHandler = (event) => {\r\n        setEnteredAmount(event.target.value);\r\n    };\r\n    const dateChangeHandler = (event) => {\r\n        setEnteredDate(event.target.value);\r\n    };\r\n\r\n    //ao invés de escrever 3 funções, como feito acima, é possível escrever uma só função como esta \r\n    //como essa função tem parâmetros ela deve ser passada dentro de uma função anônima recebendo o evento como parâmetro\r\n    //Para que a função não seja executada quando o código jsx for analisado, mas sim quando o evento, no caso onChange, acontecer\r\n    //onChange = ((event) => inputChangeHandler('title', event.target.value))\r\n\r\n    /* const inputChangeHandler = (identifier, value) => {\r\n        if (identifier === 'title') {\r\n            setEnteredTitle(value); \r\n        } else if (identifier === 'date') {\r\n            setEnteredDate(value);\r\n        } else {\r\n            setEnteredAmount(value);\r\n        }\r\n    }*/\r\n\r\n    //função que vai lidar com a submissão do form\r\n    //na função, ao invés de só ouvirmos ao evento, agora ela também retorna um valor a ele, nesse caso, limpando os inputs\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const expenseData = {\r\n            title: enteredTitle,\r\n            amount: enteredAmount,\r\n            date: new Date(enteredDate),\r\n        }\r\n\r\n        //como onSaveExpenseData está esperando uma função, o código está executando a função passada com propriedade nesse local\r\n        //e recebendo o o objeto expenseData como um parâmetro\r\n        props.onSaveExpenseData(expenseData);\r\n        setEnteredTitle('');\r\n        setEnteredAmount('');\r\n        setEnteredDate('');\r\n    };\r\n\r\n    return (\r\n    <form onSubmit={submitHandler}>\r\n        <div className=\"new-expense__controls\">\r\n            <div className=\"new-expense__control\">\r\n                <label>Title</label>\r\n                <input type=\"text\" value={enteredTitle} onChange={titleChangeHandler} />\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n                <label>Amount</label>\r\n                <input type=\"number\" min=\"0.01\" step=\"0.01\" value={enteredAmount} onChange={amountChangeHandler} />\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n                <label>Date</label>\r\n                <input type=\"date\" min=\"2019-01-01\" max=\"2022-12-31\" value={enteredDate} onChange={dateChangeHandler} />\r\n            </div>\r\n            <div className=\"new-expense__actions\">\r\n                <button type=\"submit\">Add Expense</button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n    );\r\n}\r\n\r\nexport default ExpenseForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAErC,OAAO,mBAAmB;;AAE1B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAE3B;;EAEA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAElD;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMY,kBAAkB,GAAIC,KAAK,IAAK;IAClCN,eAAe,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACnC;IACD;IACE;IACD;IACA;IACA;IACD;IACD;IACD;EACD,CAAC;;EACD,MAAMC,mBAAmB,GAAIH,KAAK,IAAK;IACnCJ,gBAAgB,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACxC,CAAC;EACD,MAAME,iBAAiB,GAAIJ,KAAK,IAAK;IACjCF,cAAc,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACtC,CAAC;;EAED;EACA;EACA;EACA;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;EACA;EACA,MAAMG,aAAa,GAAIL,KAAK,IAAK;IAC7BA,KAAK,CAACM,cAAc,CAAC,CAAC;IAEtB,MAAMC,WAAW,GAAG;MAChBC,KAAK,EAAEf,YAAY;MACnBgB,MAAM,EAAEd,aAAa;MACrBe,IAAI,EAAE,IAAIC,IAAI,CAACd,WAAW;IAC9B,CAAC;;IAED;IACA;IACAN,KAAK,CAACqB,iBAAiB,CAACL,WAAW,CAAC;IACpCb,eAAe,CAAC,EAAE,CAAC;IACnBE,gBAAgB,CAAC,EAAE,CAAC;IACpBE,cAAc,CAAC,EAAE,CAAC;EACtB,CAAC;EAED,oBACAT,OAAA;IAAMwB,QAAQ,EAAER,aAAc;IAAAS,QAAA,eAC1BzB,OAAA;MAAK0B,SAAS,EAAC,uBAAuB;MAAAD,QAAA,gBAClCzB,OAAA;QAAK0B,SAAS,EAAC,sBAAsB;QAAAD,QAAA,gBACjCzB,OAAA;UAAAyB,QAAA,EAAO;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpB9B,OAAA;UAAO+B,IAAI,EAAC,MAAM;UAAClB,KAAK,EAAET,YAAa;UAAC4B,QAAQ,EAAEtB;QAAmB;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvE,CAAC,eACN9B,OAAA;QAAK0B,SAAS,EAAC,sBAAsB;QAAAD,QAAA,gBACjCzB,OAAA;UAAAyB,QAAA,EAAO;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrB9B,OAAA;UAAO+B,IAAI,EAAC,QAAQ;UAACE,GAAG,EAAC,MAAM;UAACC,IAAI,EAAC,MAAM;UAACrB,KAAK,EAAEP,aAAc;UAAC0B,QAAQ,EAAElB;QAAoB;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClG,CAAC,eACN9B,OAAA;QAAK0B,SAAS,EAAC,sBAAsB;QAAAD,QAAA,gBACjCzB,OAAA;UAAAyB,QAAA,EAAO;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACnB9B,OAAA;UAAO+B,IAAI,EAAC,MAAM;UAACE,GAAG,EAAC,YAAY;UAACE,GAAG,EAAC,YAAY;UAACtB,KAAK,EAAEL,WAAY;UAACwB,QAAQ,EAAEjB;QAAkB;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvG,CAAC,eACN9B,OAAA;QAAK0B,SAAS,EAAC,sBAAsB;QAAAD,QAAA,eACjCzB,OAAA;UAAQ+B,IAAI,EAAC,QAAQ;UAAAN,QAAA,EAAC;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEX,CAAC;AAAA3B,EAAA,CA3FKF,WAAW;AAAAmC,EAAA,GAAXnC,WAAW;AA6FjB,eAAeA,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}